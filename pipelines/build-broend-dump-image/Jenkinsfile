#!groovyâ€‹

properties([
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')),
        pipelineTriggers([]),
        disableConcurrentBuilds()
])

def PRODUCT = "dbc-broend-env"
def CONTAINER_NAME = "${PRODUCT}-${BRANCH_NAME}"
if ("$BRANCH_NAME" == "master") {
    CONTAINER_NAME = "$PRODUCT"
}
def BUILD_NAME = "$PRODUCT :: $BRANCH_NAME"
def DOCKER_REPO = "docker.dbc.dk"
def DOCKER_NAME = "${DOCKER_REPO}/${CONTAINER_NAME}:${BUILD_NUMBER}"
def DOCKER_NAME_LATEST = "${DOCKER_REPO}/${CONTAINER_NAME}:latest"
pipeline {
    agent {
        label 'devel10-head'
    }
    stages {
        stage('Build image') {
            steps {
                script {
                    sh """
                        cd pipelines/build-broend-dump-image
                        docker build -t $DOCKER_NAME --pull --no-cache .
                        docker tag $DOCKER_NAME $DOCKER_NAME_LATEST
                    """
                }
            }
        }
        stage('Push to Artifactory') {
//            when {
//                branch "master"
//            }
            steps {
                script {
                    if (currentBuild.resultIsBetterOrEqualTo('SUCCESS')) {
                        def ARTY_SERVER = Artifactory.server 'arty'
                        def ARTY_DOCKER = Artifactory.docker server: ARTY_SERVER, host: env.DOCKER_HOST
                        def BUILD_INFO = Artifactory.newBuildInfo()
                        BUILD_INFO.name = BUILD_NAME
                        BUILD_INFO.env.capture = true
                        BUILD_INFO.env.collect()
                        BUILD_INFO = ARTY_DOCKER.push("$DOCKER_NAME", 'docker', BUILD_INFO)
                        ARTY_DOCKER.push("$DOCKER_NAME_LATEST", 'docker-ux', BUILD_INFO)
                        ARTY_SERVER.publishBuildInfo BUILD_INFO
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                sh """
                    echo Hello
                    docker image rm $DOCKER_NAME
                """
            }
        }
    }
}